<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>approval</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var authkey = 'rqLknCNddS4MX4inpkAbIahhbMdoS9mT4fL0IbC29unVNjCSzJjBlLytw4VPkPj+';
	var scalr_sig = request.getHeader('X-Signature');
	var scalr_date = request.getHeader('Date');
	var scalr_gdate = new GlideDate();
	scalr_gdate.setValue(convertDateToGDT(scalr_date));
	var scalr_gtime = new GlideTime();
	scalr_gtime.setValue(scalr_date.substring(16, scalr_date.length-4));
	var scalr_hour = scalr_gtime.getHourOfDayUTC();
	var scalr_min = scalr_gtime.getMinutesUTC();

	if (scalr_hour.length < 2) {
		scalr_hour = '0' + scalr_hour;
	}
	if (scalr_min.length < 2) {
		scalr_min = '0' + scalr_min;
	}
	
	var gdt = new GlideDateTime();	
	var scalr_gdt = new GlideDateTime(scalr_gdate.getByFormat('yyyy-MM-dd') + " " + scalr_hour + ':' + scalr_min + ':' + scalr_gtime.getSeconds()); 
	var diff = new GlideDuration();
	diff = GlideDateTime.subtract(scalr_gdt, gdt);

	if(diff.getNumericValue()/1000 > 300){
		return 403;
	}

	gs.info('running.....');
	info = request.body.dataString;
	var data = info + scalr_date;
	gs.info("Payload + Date:" + data);
	
	var signature = new CryptoJS.HmacSHA1(data, authkey);
	
	var mac = new CertificateEncryption();
    var siglcc = mac.generateMac(authkey, "HmacSHA256", data);
	gs.info('lccc.......');
	gs.info(siglcc);
	gs.info('lccc.......');
		
	gs.info("SNOW Sig: " + signature + "    Scalr sig:" + scalr_sig);
	if(scalr_sig != signature) {
		gs.info("Signature Mismatch");
		return 403;
	}
 	update(info);
	
// 	set Scalr approval 202 and message
	response.setContentType('application/json');
	response.setStatus(202);
	var writer = response.getStreamWriter();
	writer.writeString("{\"approval_status\": \"pending\", \"message\": \"pending\"}");
})(request, response);

function update(info) {
	var parsed = new global.JSON().decode(info);
	var gr = new GlideRecord('x_301778_scalr_cmd_scalr_approval');
	gr.initialize();
	gr.farm_name = parsed.data.SCALR_FARM_NAME;
	gr.requestid = parsed.requestId;
	gr.state = "pending";
	gs.info("Inserting...: " + parsed.data.SCALR_SERVER_ID);
	gr.insert();
}

function convertDateToGDT(scalr_date) {
	var scalr_fmt_date = '';
	switch(scalr_date.substring(7,10)) {
		case 'Jan':
			scalr_fmt_date = scalr_date.substring(11,15) + '-01-' + scalr_date.substring(4,6);
			break;
		case 'Feb':
			scalr_fmt_date = scalr_date.substring(11,15) + '-02-' + scalr_date.substring(4,6);
			break;
		case 'Mar':
			scalr_fmt_date = scalr_date.substring(11,15) + '-03-' + scalr_date.substring(4,6);
			break;
		case 'Apr':
			scalr_fmt_date = scalr_date.substring(11,15) + '-04-' + scalr_date.substring(4,6);
			break;
		case 'May':
			scalr_fmt_date = scalr_date.substring(11,15) + '-05-' + scalr_date.substring(4,6);
			break;
		case 'Jun':
			scalr_fmt_date = scalr_date.substring(11,15) + '-06-' + scalr_date.substring(4,6);
			break;
		case 'Jul':
			scalr_fmt_date = scalr_date.substring(11,15) + '-07-' + scalr_date.substring(4,6);
			break;
		case 'Aug':
			scalr_fmt_date = scalr_date.substring(11,15) + '-08-' + scalr_date.substring(4,6);
			break;			
		case 'Sep':
			scalr_fmt_date = scalr_date.substring(11,15) + '-09-' + scalr_date.substring(4,6);
			break;
		case 'Oct':
			scalr_fmt_date = scalr_date.substring(11,15) + '-10-' + scalr_date.substring(4,6);
			break;
		case 'Nov':
			scalr_fmt_date = scalr_date.substring(11,15) + '-11-' + scalr_date.substring(4,6);
			break;
		case 'Dec':
			scalr_fmt_date = scalr_date.substring(11,15) + '-12-' + scalr_date.substring(4,6);
			break;
		default:
			break;
	}
	return scalr_fmt_date;
}]]></operation_script>
        <operation_uri>/api/x_301778_scalr_cmd/approval</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>false</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-12-17 23:42:23</sys_created_on>
        <sys_id>c03ba33fdb5623005d3064d74896195f</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>approval</sys_name>
        <sys_package display_value="Scalr CMDB Webhook" source="x_301778_scalr_cmd">907acfb2db16230022d08a1848961906</sys_package>
        <sys_policy/>
        <sys_scope display_value="Scalr CMDB Webhook">907acfb2db16230022d08a1848961906</sys_scope>
        <sys_update_name>sys_ws_operation_c03ba33fdb5623005d3064d74896195f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-12-18 19:41:54</sys_updated_on>
        <web_service_definition display_value="approval">fb1b633fdb5623005d3064d748961967</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
